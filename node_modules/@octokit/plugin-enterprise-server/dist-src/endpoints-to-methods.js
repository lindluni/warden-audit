export function endpointsToMethods(octokit, endpointsMap) {
    const newMethods = {};
    for (const [scope, endpoints] of Object.entries(endpointsMap)) {
        for (const [methodName, endpoint] of Object.entries(endpoints)) {
            const [route, defaults, decorations = {}] = endpoint;
            const [method, url] = route.split(/ /);
            const endpointDefaults = Object.assign({ method, url }, defaults);
            if (!newMethods[scope]) {
                newMethods[scope] = {};
            }
            const scopeMethods = newMethods[scope];
            if (decorations.renamed) {
                const [newScope, newMethodName] = decorations.renamed;
                scopeMethods[methodName] = deprecate(octokit, `octokit.${scope}.${methodName}() has been renamed to octokit.${newScope}.${newMethodName}()`, endpointDefaults);
                continue;
            }
            /* istanbul ignore next - there are currently no deprecated methods*/
            if (decorations.deprecated) {
                scopeMethods[methodName] = deprecate(octokit, decorations.deprecated, endpointDefaults);
                continue;
            }
            scopeMethods[methodName] = octokit.request.defaults(endpointDefaults);
        }
    }
    return newMethods;
}
function deprecate(octokit, deprecation, defaults) {
    const requestWithDefaults = octokit.request.defaults(defaults);
    function deprecated(...args) {
        octokit.log.warn(deprecation);
        // @ts-ignore https://github.com/microsoft/TypeScript/issues/25488
        return requestWithDefaults(...args);
    }
    return Object.assign(deprecated, requestWithDefaults);
}
